// you can write to stdout for debugging purposes, e.g.
// console.log('this is a debug message');

function solution(T) {
    // Implement your solution here
    if(!T) return -1;
    return calculateTreeHeight(T);
}
function calculateTreeHeight(root){
        if (!root) {
            // console.log('-- No Root Data --')
            return 0;
        }
        // console.log('-- Root '+root.x+' >>> '+ root.l + ' - ' +root.r)
        if (root.l != null || root.r != null) {
            return 1 + 
                max(calculateTreeHeight(root.l), 
                    calculateTreeHeight(root.r));
        }
        return 0;
}
function max(a, b){
    // console.log('LEFT H : '+a + ' RIGHT H : '+b);
    if(a >= b) return a;
    return b;
}


(2, [1], [3, 2, 5, 5])


function solution(A) {
    // Implement your solution here
    let oddNum = new Set();
    let numMap = {};

    for(let i=0; i<A.length; i++){
        if(numMap[A[i]]){
            numMap[A[i]] += 1;
            if(oddNum.has(A[i])){
                oddNum.delete(A[i]);
            }
        }else{
            numMap[A[i]] = 1;
            oddNum.add(A[i])
        }
    }

    // console.log(oddNum)
    return oddNum.size > 0 ? oddNum.keys().next().value : 0;
}


function solution(A) {
    // Implement your solution here
    
    let wl = 0;

    for(i=1; i<A.length; i++){

        const leftBlocks = A.slice(0, i);
        const rightBlocks = A.slice(i, A.length);
        let highestL = Math.max(...leftBlocks);
        let highestR = Math.max(...rightBlocks);
        let lv = min(highestL, highestR) - A[i];
        wl = lv > wl ? lv : wl;
    }
        
    return wl;
    
}

function min(a, b){
    return a <= b ? a : b;
}


function solution(A) {
    // Implement your solution here
    if(A.length === 0) return 1;
    if(A.length === 1){
        return A[0] === 1? 2:  1;
    }
    A.sort((a,b) => {return a-b});
    
    const missingIndex = dosearch(0, A.length-1, A);
    if((missingIndex+1) === A.length && A[A.length-1] === A.length){
        return A.length+1;
    }
    return missingIndex+1;
}

function dosearch(start, end, A){
    if(start < end){
        let mid = Math.floor(((end - start)/2)+start);
        let midExpect = mid+1;
        if(A[mid] > midExpect){
            return dosearch(start, mid, A);
        }else{
            return dosearch(mid+1, end, A);
        }
    }
    return start;
    
}


// you can write to stdout for debugging purposes, e.g.
// console.log('this is a debug message');

function solution(X, A) {
    // Implement your solution here
    // let second = -1;
    // let distance = X;
    let positions = new Set();
    for(let i=1; i<= X; i++){
        positions.add(i);
    }
    for(let i=0; i< A.length; i++){
        positions.delete(A[i]);
        if(positions.size === 0){
            return i;
        }
    }
    return -1;
}

function solution(A) {
    // Implement your solution here
    A.sort((a,b) => {
        return a-b;
    });
    for(let i=0; i< A.length; i++){
        if(A[i] !== i+1)
        return 0;
    }
    return 1;
}

// you can write to stdout for debugging purposes, e.g.
// console.log('this is a debug message');

function solution(A) {
    // Implement your solution her
    let pairCount = 0;
    let eastCar = 0;
    for(let i=0; i<A.length ; i++){
        if(A[i] === 0){
            eastCar++;
        }else{
            pairCount += eastCar;
        }
        if(pairCount > 1000000000){
            return -1;
        }
    }
    return pairCount;
}

function solution(A) {
    // Implement your solution here
    A = A.filter((a, index) => {
        return A.indexOf(a) === index;
    });
    return A.length;
}

// you can write to stdout for debugging purposes, e.g.
// console.log('this is a debug message');

function solution(A) {
    // Implement your solution here
    let unique = [];
    for(let i=0; i< A.length; i++){
        if(A.lastIndexOf(A[i]) === i){
            unique.push(A[i]);
        }
    }
    return unique.length;
}

// you can write to stdout for debugging purposes, e.g.
// console.log('this is a debug message');

function solution(A) {
    // Implement your solution here

    let num = 0;
    let dup = [];
    for(let i=0; i< A.length; i++){
        if(!dup.includes(A[i]) && A.lastIndexOf(A[i]) === i){
            num = A[i];
            break;
        }
        dup.push(A[i]);
    }
    return num;
}


function solution(A) {
    // Implement your solution here

    let num = 0;
    let occurances = new Map();
    for(let i=0; i< A.length; i++){
        if(occurances.has(A[i])){
            occurances.set(A[i], occurances.get(A[i])+1);
        }else{
            occurances.set(A[i], 1);
        }
    }
    for(let [k,v] of occurances){
        if(v%2 !== 0) return k;
    }
    return num;
}
